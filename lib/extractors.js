// Generated by CoffeeScript 1.9.2
var extractors;

extractors = {
  title: {
    name: "title",
    extract: function($, res, next) {
      var e, title;
      title = (function() {
        try {
          return $('head > title').text();
        } catch (_error) {
          e = _error;
        }
      })();
      if (e) {
        return next(null);
      }
      return next(null, title);
    }
  },
  description: {
    name: "description",
    extract: function($, res, next) {
      var description, e;
      description = (function() {
        try {
          return $('meta[name="description"]').attr('content');
        } catch (_error) {
          e = _error;
        }
      })();
      if (e) {
        return next(null);
      }
      return next(null, description);
    }
  },
  image: {
    name: "image",
    parseInlineCss: function(css) {
      var declaration, declarations, i, key, len, parsed, ref, value;
      parsed = {};
      try {
        declarations = css.split(';');
        for (i = 0, len = declarations.length; i < len; i++) {
          declaration = declarations[i];
          ref = declaration.split(':'), key = ref[0], value = ref[1];
          key = key.replace(/\s/g, '');
          value = value.replace(/\s/g, '');
          parsed[key] = value;
        }
      } catch (_error) {}
      return parsed;
    },
    extract: function($, res, next) {
      var e, height, i, image, images, img, len, ratio, styles, width;
      try {
        images = $('img');
        for (i = 0, len = images.length; i < len; i++) {
          img = images[i];
          width = img.attribs.width;
          height = img.attribs.height;
          styles = this.parseInlineCss(img.attribs.style);
          if (!width && styles.width && /px/.test(styles.width)) {
            width = styles.width.split('px')[0];
          }
          if (!height && styles.height && /px/.test(styles.height)) {
            height = styles.height.split('px')[0];
          }
          width = parseInt(height, 10);
          height = parseInt(height, 10);
          ratio = width / height;
          if (width > 200 && height > 200 && ratio < 2 && ratio > 0.5 && img.attribs.src) {
            image = img.attribs.src;
            break;
          }
        }
      } catch (_error) {
        e = _error;
        if (e) {
          return callback(null);
        }
      }
      return next(null, image);
    }
  },
  explicitImage: {
    name: 'explicitImage',
    extract: function($, res, next) {
      var ref;
      if ((ref = res.headers['content-type']) === 'image/png' || ref === 'image/jpg' || ref === 'image/jpeg') {
        return next(null, res.request.href);
      } else {
        return next(null);
      }
    }
  },
  metaImage: {
    name: 'metaImage',
    extract: function($, res, next) {
      var e, i, img, len, meta, tag;
      try {
        meta = $("meta");
        img = null;
        for (i = 0, len = meta.length; i < len; i++) {
          tag = meta[i];
          if (tag.attribs.itemprop === 'image') {
            img = tag.attribs.content;
            break;
          }
        }
      } catch (_error) {
        e = _error;
        if (e) {
          return callback(null);
        }
      }
      return next(null, img);
    }
  }
};

module.exports = extractors;
